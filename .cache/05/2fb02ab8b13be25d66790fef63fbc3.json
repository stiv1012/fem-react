{"id":"../node_modules/spotify-web-api-node/src/server-methods.js","dependencies":[{"name":"D:\\react\\fem-react\\package.json","includedInParent":true,"mtime":1539651039850},{"name":"D:\\react\\fem-react\\node_modules\\spotify-web-api-node\\package.json","includedInParent":true,"mtime":1539643632972},{"name":"./authentication-request","loc":{"line":3,"column":36},"parent":"D:\\react\\fem-react\\node_modules\\spotify-web-api-node\\src\\server-methods.js","resolved":"D:\\react\\fem-react\\node_modules\\spotify-web-api-node\\src\\authentication-request.js"},{"name":"./http-manager","loc":{"line":4,"column":26},"parent":"D:\\react\\fem-react\\node_modules\\spotify-web-api-node\\src\\server-methods.js","resolved":"D:\\react\\fem-react\\node_modules\\spotify-web-api-node\\src\\http-manager.js"},{"name":"buffer","parent":"D:\\react\\fem-react\\node_modules\\spotify-web-api-node\\src\\server-methods.js","resolved":"D:\\react\\fem-react\\node_modules\\buffer\\index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nvar AuthenticationRequest = require('./authentication-request');\nvar HttpManager = require('./http-manager');\n\nmodule.exports = {\n  /**\n   * Request an access token using the Client Credentials flow.\n   * Requires that client ID and client secret has been set previous to the call.\n   * @param {Object} options Options.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          token type and time to expiration. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  clientCredentialsGrant: function(options, callback) {\n    return AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        grant_type: 'client_credentials'\n      })\n      .withBodyParameters(options)\n      .withHeaders({\n        Authorization:\n          'Basic ' +\n          new Buffer(\n            this.getClientId() + ':' + this.getClientSecret()\n          ).toString('base64')\n      })\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Request an access token using the Authorization Code flow.\n   * Requires that client ID, client secret, and redirect URI has been set previous to the call.\n   * @param {string} code The authorization code returned in the callback in the Authorization Code flow.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          refresh token, token type and time to expiration. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */\n  authorizationCodeGrant: function(code, callback) {\n    return AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        grant_type: 'authorization_code',\n        redirect_uri: this.getRedirectURI(),\n        code: code,\n        client_id: this.getClientId(),\n        client_secret: this.getClientSecret()\n      })\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Refresh the access token given that it hasn't expired.\n   * Requires that client ID, client secret and refresh token has been set previous to the call.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing the\n   *          access token, time to expiration and token type. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */\n  refreshAccessToken: function(callback) {\n    return AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        grant_type: 'refresh_token',\n        refresh_token: this.getRefreshToken()\n      })\n      .withHeaders({\n        Authorization:\n          'Basic ' +\n          new Buffer(\n            this.getClientId() + ':' + this.getClientSecret()\n          ).toString('base64')\n      })\n      .build()\n      .execute(HttpManager.post, callback);\n  }\n};\n","map":{"mappings":[{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/spotify-web-api-node/src/server-methods.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}}],"sources":{"../node_modules/spotify-web-api-node/src/server-methods.js":"'use strict';\n\nvar AuthenticationRequest = require('./authentication-request');\nvar HttpManager = require('./http-manager');\n\nmodule.exports = {\n  /**\n   * Request an access token using the Client Credentials flow.\n   * Requires that client ID and client secret has been set previous to the call.\n   * @param {Object} options Options.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          token type and time to expiration. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  clientCredentialsGrant: function(options, callback) {\n    return AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        grant_type: 'client_credentials'\n      })\n      .withBodyParameters(options)\n      .withHeaders({\n        Authorization:\n          'Basic ' +\n          new Buffer(\n            this.getClientId() + ':' + this.getClientSecret()\n          ).toString('base64')\n      })\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Request an access token using the Authorization Code flow.\n   * Requires that client ID, client secret, and redirect URI has been set previous to the call.\n   * @param {string} code The authorization code returned in the callback in the Authorization Code flow.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          refresh token, token type and time to expiration. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */\n  authorizationCodeGrant: function(code, callback) {\n    return AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        grant_type: 'authorization_code',\n        redirect_uri: this.getRedirectURI(),\n        code: code,\n        client_id: this.getClientId(),\n        client_secret: this.getClientSecret()\n      })\n      .build()\n      .execute(HttpManager.post, callback);\n  },\n\n  /**\n   * Refresh the access token given that it hasn't expired.\n   * Requires that client ID, client secret and refresh token has been set previous to the call.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing the\n   *          access token, time to expiration and token type. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */\n  refreshAccessToken: function(callback) {\n    return AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        grant_type: 'refresh_token',\n        refresh_token: this.getRefreshToken()\n      })\n      .withHeaders({\n        Authorization:\n          'Basic ' +\n          new Buffer(\n            this.getClientId() + ':' + this.getClientSecret()\n          ).toString('base64')\n      })\n      .build()\n      .execute(HttpManager.post, callback);\n  }\n};\n"},"lineCount":83}},"hash":"d7ffa6adc1998a7a8ec9d42b8cacd339","cacheData":{"env":{}}}